---
export interface Props {
  title: string;
  description?: string;
  initialTheme?: 'light' | 'dark';
  showCodeInitially?: boolean;
  codeLanguage?: string;
  fullBleed?: boolean;
  minHeight?: string;
  maxHeight?: string | null;
  class?: string;
}

const {
  title,
  description,
  initialTheme = 'dark',
  showCodeInitially = false,
  codeLanguage = 'html',
  fullBleed = false,
  minHeight = '12rem',
  maxHeight = null,
  class: className = '',
} = Astro.props;

const UID = `cs-${Math.random().toString(36).slice(2)}`;
const lightActive = initialTheme === 'light';
const darkActive = initialTheme !== 'light';
---

<style is:global>
  .cs-root{border-radius:16px;overflow:hidden;border:1px solid rgba(148,163,184,.18);
    background:linear-gradient(180deg,rgba(2,6,23,.66),rgba(2,6,23,.35));
    backdrop-filter:blur(8px);box-shadow:0 18px 45px rgba(2,6,23,.25),inset 0 1px 0 rgba(255,255,255,.05)}
  .cs-head{display:flex;justify-content:space-between;align-items:center;gap:.75rem;padding:.875rem 1rem;
    background:linear-gradient(180deg,rgba(15,23,42,.65),rgba(15,23,42,.45));border-bottom:1px solid rgba(148,163,184,.18)}
  .cs-title{font-weight:600;color:#e5e7eb;font-size:1rem}
  .cs-desc{color:#94a3b8;font-size:.875rem;margin-top:.25rem}
  .cs-controls{display:flex;gap:.5rem;align-items:center}
  .cs-btn{appearance:none;border:1px solid rgba(148,163,184,.28);background:rgba(255,255,255,.06);
    color:#e5e7eb;border-radius:999px;padding:.45rem .75rem;font-size:.825rem;line-height:1;cursor:pointer;
    box-shadow:inset 0 1px 0 rgba(255,255,255,.04);transition:.2s ease}
  .cs-btn:hover{background:rgba(255,255,255,.1)}
  .cs-btn[aria-pressed="true"]{background:rgba(255,255,255,.16);border-color:rgba(255,255,255,.35)}
  .cs-sep{width:1px;height:26px;background:rgba(148,163,184,.22)}

  .cs-stage{padding:1rem}
  .cs-stage.full{padding:0}
  .cs-minH{min-height:var(--cs-minH,12rem)}
  .cs-maxH{max-height:var(--cs-maxH)}
  .cs-inner{position:relative}
  .cs-pane{display:none;border-radius:12px;overflow:hidden;border:1px solid rgba(148,163,184,.16)}
  .cs-pane.active{display:block}
  .cs-pane .pad{padding:1rem}
  .theme-light{background:linear-gradient(180deg,#f1f5f9,#ffffff);color:#0f172a}
  .theme-dark{background:linear-gradient(180deg,var(--bg-base-from),var(--bg-base-to));color:#e2e8f0}

  .cs-code{border-top:1px solid rgba(148,163,184,.18);background:#0b1220;display:none}
  .cs-code[aria-hidden="false"]{display:block}
  .cs-codebar{display:flex;justify-content:space-between;align-items:center;gap:.5rem;padding:.5rem .75rem;
    border-bottom:1px solid rgba(148,163,184,.18)}
  .cs-badge{font-size:.75rem;padding:.2rem .5rem;border-radius:6px;color:#cbd5e1;border:1px solid rgba(148,163,184,.25);
    background:rgba(255,255,255,.04)}
  .cs-pre{margin:0;padding:1rem;color:#e5e7eb;font-size:.85rem;overflow:auto;font-family:ui-monospace,Menlo,Monaco,Consolas,monospace}
  .cs-extra{display:flex;gap:.5rem;align-items:center;padding:.5rem 1rem;border-top:1px solid rgba(148,163,184,.18);
    border-bottom:1px solid rgba(148,163,184,.18);background:linear-gradient(180deg,rgba(15,23,42,.45),rgba(15,23,42,.35))}
  .cs-extra:empty{display:none}
  @media (max-width:820px){ .cs-head{align-items:flex-start} }
</style>

<div id={UID} class={`cs-root ${className}`} data-theme={initialTheme} data-code={showCodeInitially ? 'open' : 'closed'}>
  <div class="cs-head">
    <div>
      <div class="cs-title">{title}</div>
      {description && <div class="cs-desc">{description}</div>}
    </div>
    <div class="cs-controls">
      <button class="cs-btn" data-action="set-theme" data-value="light" aria-pressed={lightActive?'true':'false'}>Light</button>
      <button class="cs-btn" data-action="set-theme" data-value="dark" aria-pressed={darkActive?'true':'false'}>Dark</button>
      <span class="cs-sep" aria-hidden="true"></span>
      <button class="cs-btn" data-action="toggle-code" aria-pressed={showCodeInitially?'true':'false'}>Code</button>
      <button class="cs-btn" data-action="copy-code" title="Code kopieren">Copy</button>
    </div>
  </div>

  <div class="cs-extra"><slot name="controls" /></div>

  <div class={`cs-stage ${fullBleed ? 'full' : ''}`}>
    <div class={`cs-inner ${!fullBleed ? 'cs-minH' : ''} ${maxHeight ? 'cs-maxH' : ''}`}
         style={`--cs-minH:${minHeight};${maxHeight ? `--cs-maxH:${maxHeight}`:''}`}>
      <div class={`cs-pane theme-light ${lightActive ? 'active' : ''}`} data-pane="light">
        <div class="pad"><slot name="light" /></div>
      </div>
      <div class={`cs-pane theme-dark ${darkActive ? 'active' : ''}`} data-pane="dark">
        <div class="pad"><slot name="dark" /></div>
      </div>
    </div>
  </div>

  <div class="cs-code" data-section="code" aria-hidden={showCodeInitially ? 'false' : 'true'}>
    <div class="cs-codebar">
      <span class="cs-badge">{codeLanguage.toUpperCase()}</span>
      <span class="cs-badge">Quellcode</span>
    </div>
    <pre class="cs-pre"><code data-code><slot name="code" /></code></pre>
  </div>
</div>

<script is:inline>
  (function(){
    const ROOT_ID = '${UID}'; // <- sichere Übergabe der Instanz-ID
    const ready = (fn)=> (document.readyState==='loading' ? document.addEventListener('DOMContentLoaded', fn, {once:true}) : fn());
    ready(() => {
      const root = document.getElementById(ROOT_ID);
      if(!root) return;

      const panes = {
        light: root.querySelector('[data-pane="light"]'),
        dark: root.querySelector('[data-pane="dark"]')
      };
      const codeSection = root.querySelector('[data-section="code"]');

      const setPressed = (val) => {
        root.querySelectorAll('[data-action="set-theme"]').forEach(b =>
          b.setAttribute('aria-pressed', b.dataset.value === val ? 'true' : 'false')
        );
      };
      const showTheme = (val) => {
        panes.light?.classList.toggle('active', val === 'light');
        panes.dark?.classList.toggle('active', val === 'dark');
        setPressed(val);
        root.dataset.theme = val;
      };
      const toggleCode = () => {
        const open = codeSection.getAttribute('aria-hidden') === 'false';
        codeSection.setAttribute('aria-hidden', open ? 'true' : 'false');
        root.querySelector('[data-action="toggle-code"]')?.setAttribute('aria-pressed', open ? 'false' : 'true');
      };
      const copyCode = async () => {
        const codeEl = root.querySelector('[data-code]');
        const text = (codeEl?.innerText || '').trim();
        try { await navigator.clipboard.writeText(text); }
        catch {
          const ta = document.createElement('textarea'); ta.value = text; document.body.appendChild(ta);
          ta.select(); document.execCommand('copy'); ta.remove();
        }
        const btn = root.querySelector('[data-action="copy-code"]');
        if(btn){ const old = btn.textContent; btn.textContent = 'Kopiert ✔'; setTimeout(()=> btn.textContent = old!, 900); }
      };

      root.addEventListener('click', (e) => {
        const btn = (e.target as HTMLElement).closest?.('[data-action]');
        if(!btn) return;
        const action = (btn as HTMLElement).getAttribute('data-action');
        if(action === 'set-theme') showTheme((btn as HTMLElement).getAttribute('data-value') || 'dark');
        if(action === 'toggle-code') toggleCode();
        if(action === 'copy-code') copyCode();
      });

      // initial state from data attributes already applied in markup
    });
  })();
</script>
