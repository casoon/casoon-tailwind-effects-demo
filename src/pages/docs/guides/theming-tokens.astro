---
import DocsBase from '../../../layouts/DocsBase.astro';
import ToC from '../../../components/docs/ToC.astro';
import DocSection from '../../../components/docs/DocSection.astro';
import Tips from '../../../components/docs/Tips.astro';
import CodeBlock from '../../../components/docs/CodeBlock.astro';
import PlaygroundLink from '../../../components/docs/PlaygroundLink.astro';
---

<DocsBase title="Guide – Theming with Tokens">
  <h1>Guide: Theming with Tokens</h1>
  <p class="lead">Use CSS custom properties to theme glass components consistently.</p>

  <div class="theme-controls" role="group" aria-label="Theme">
    <button type="button" class="tc-btn" data-theme-all="light">Light</button>
    <button type="button" class="tc-btn" data-theme-all="dark" aria-pressed="true">Dark</button>
  </div>

  <ToC items={[
    { id: 'global', label: 'Global' },
    { id: 'scoped', label: 'Scoped' },
    { id: 'mix', label: 'Mix & Match' },
  ]} />

  <DocSection id="global" title="Global">
    <CodeBlock lang="css" title=":root – global defaults">
{`:root {
  --glass-radius: 1.25rem;
  --glass-blur: 12px;
  --glass-border: rgba(255,255,255,.15);
  --glass-bg: rgba(255,255,255,.08);
}`}    
    </CodeBlock>
    <Tips items={[ 'Keep global defaults centralized in your theme.', 'Avoid hardcoding in components — reference tokens only.' ]} />
  </DocSection>

  <DocSection id="scoped" title="Scoped">
    <CodeBlock lang="css" title="Section with local overrides">
{`.pricing {
  --glass-radius: 1rem;
  --glass-blur: 10px;
}
.pricing .glass-card { border-radius: var(--glass-radius); }`}
    </CodeBlock>
  </DocSection>

  <DocSection id="mix" title="Mix & Match">
    <Tips>
      <ul>
        <li>Group tokens per page/feature to keep things maintainable.</li>
        <li>On dark backgrounds consider <span class="code-inline">.glass-light</span>.</li>
      </ul>
    </Tips>
  </DocSection>

  <DocSection id="try" title="Try in Playground" description="Adjust tokens live">
    <p><PlaygroundLink effect="glass-card" pane="dark" code={true} /></p>
  </DocSection>

</DocsBase>
<style is:global>
  .theme-controls{display:flex;gap:.5rem;margin:1rem 0}
  .tc-btn{appearance:none;border:1px solid var(--docs-border);background:linear-gradient(180deg,var(--docs-panel),var(--docs-panel-2));
    color:var(--docs-text);border-radius:999px;padding:.45rem .75rem;cursor:pointer}
  .tc-btn[aria-pressed="true"]{background:rgba(255,255,255,.1)}
  .docs-showcase .cs-controls [data-action="set-theme"]{display:none}
</style>
<script is:inline>
  (function(){
    const ready = (fn)=> (document.readyState==='loading' ? document.addEventListener('DOMContentLoaded', fn, {once:true}) : fn());
    ready(()=>{
      const setAll = (val) => {
        document.querySelectorAll('.cs-root').forEach(root => {
          const btn = root.querySelector(`[data-action=\"set-theme\"][data-value=\"${val}\"]`);
          (btn)?.dispatchEvent(new MouseEvent('click', { bubbles:true, cancelable:true }));
        });
        document.querySelectorAll('[data-theme-all]').forEach(b => b.setAttribute('aria-pressed', b.getAttribute('data-theme-all')===val?'true':'false'));
      };
      document.querySelectorAll('[data-theme-all]').forEach(b => b.addEventListener('click', () => setAll(b.getAttribute('data-theme-all') || 'dark')));
      setAll('dark');
    });
  })();
</script>
