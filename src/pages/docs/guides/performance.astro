---
import DocsBase from '../../../layouts/DocsBase.astro';
import ToC from '../../../components/docs/ToC.astro';
import DocSection from '../../../components/docs/DocSection.astro';
import Tips from '../../../components/docs/Tips.astro';
import CodeBlock from '../../../components/docs/CodeBlock.astro';
import ComponentShowcase from '../../../components/ComponentShowcase.astro';
---

<DocsBase title="Guide – Performance">
  <h1>Guide: Performance</h1>
  <p class="lead">Use effects lightly: tone down motion, keep layout stable, and load content smartly.</p>

  <div class="theme-controls" role="group" aria-label="Theme">
    <button type="button" class="tc-btn" data-theme-all="light">Hell</button>
    <button type="button" class="tc-btn" data-theme-all="dark" aria-pressed="true">Dunkel</button>
  </div>

  <ToC items={[
    { id: 'reduced-motion', label: 'Reduced Motion' },
    { id: 'layout-stability', label: 'Layout-Stabilität' },
    { id: 'conditional-effects', label: 'Effekte konditional' },
  ]} />

  <DocSection id="reduced-motion" title="Reduced Motion" description="Respektiere Nutzerpräferenzen">
    <div class="docs-showcase">
      <ComponentShowcase title="Orbs – Demo" description="Respektiert prefers-reduced-motion" fullBleed={true} minHeight="24vh" showCodeInitially={true}>
        <div slot="light">
          <section class="bg-orbs-hero min-h-[24vh] grid place-items-center">
            <h3 class="text-xl font-bold">.bg-orbs-hero</h3>
          </section>
        </div>
        <div slot="dark">
          <section class="bg-orbs-hero min-h-[24vh] grid place-items-center">
            <h3 class="text-xl font-bold">.bg-orbs-hero</h3>
          </section>
        </div>
        <template slot="code">
{`@media (prefers-reduced-motion: reduce) {
  .bg-orbs-hero { animation-duration: 0.01ms !important; animation-iteration-count: 1 !important; }
}`}
        </template>
      </ComponentShowcase>
    </div>
    <CodeBlock lang="css" title="Bewegung reduzieren">
{`@media (prefers-reduced-motion: reduce) {
  /* Transitionen und Animationen abschwächen */
  .glass, .glass-card, .glass-button, .glass-button-primary, .glass-button-secondary {
    transition-duration: 0.01ms !important;
  }
  /* Beispiel: Orbs sanft machen oder deaktivieren */
  .bg-orbs-hero {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
  }
}`}
    </CodeBlock>
    <Tips items={[ 'Only as much motion as needed — purposeful, not decorative.' ]} />
  </DocSection>

  <DocSection id="layout-stability" title="Layout-Stabilität" description="CLS vermeiden">
    <div class="docs-showcase">
      <ComponentShowcase title="Content-Visibility Demo" description="Platzhalterhöhe für stabilen Flow" minHeight="12rem" showCodeInitially={true}>
        <div slot="light">
          <div style="border:1px dashed rgba(15,23,42,.2);border-radius:12px;padding:1rem">
            <div style="content-visibility:auto;contain-intrinsic-size: 300px; border:1px solid rgba(15,23,42,.2);border-radius:8px; padding:1rem;">
              <p style="color:#334155">Content block (light) – Browser reserviert ~300px, verhindert Layout‑Sprünge.</p>
            </div>
          </div>
        </div>
        <div slot="dark">
          <div style="border:1px dashed rgba(148,163,184,.35);border-radius:12px;padding:1rem">
            <div style="content-visibility:auto;contain-intrinsic-size: 300px; border:1px solid rgba(148,163,184,.35);border-radius:8px; padding:1rem;">
              <p style="color:#cbd5e1">Content block (dark) – Browser reserviert ~300px, verhindert Layout‑Sprünge.</p>
            </div>
          </div>
        </div>
        <template slot="code">
{`<div style="content-visibility:auto; contain-intrinsic-size: 300px;">
  ... teurer Content ...
</div>`}
        </template>
      </ComponentShowcase>
    </div>
    <CodeBlock lang="css" title="Content-Visibility">
{`.docs-main [data-pane] { content-visibility: auto; contain-intrinsic-size: 600px; }`}
    </CodeBlock>
    <Tips items={[ 'Set minimum heights (min-h) to prevent layout shifts (CLS).' ]} />
  </DocSection>

  <DocSection id="conditional-effects" title="Effekte konditional" description="Nur sichtbar schalten">
    <CodeBlock lang="js" title="IntersectionObserver – Effekt aktivieren, wenn im Viewport">
{`const io = new IntersectionObserver((entries) => {
  entries.forEach(e => {
    e.target.classList.toggle('effects-active', e.isIntersecting)
  })
}, { rootMargin: '100px' })

document.querySelectorAll('.bg-orbs-hero').forEach(el => io.observe(el))`}
    </CodeBlock>
    <Tips items={[ 'Use an “effects-active” class to start animations only on demand.' ]} />
  </DocSection>

</DocsBase>
<style is:global>
  .theme-controls{display:flex;gap:.5rem;margin:1rem 0}
  .tc-btn{appearance:none;border:1px solid var(--docs-border);background:linear-gradient(180deg,var(--docs-panel),var(--docs-panel-2));
    color:var(--docs-text);border-radius:999px;padding:.45rem .75rem;cursor:pointer}
  .tc-btn[aria-pressed="true"]{background:rgba(255,255,255,.1)}
  .docs-showcase .cs-controls [data-action="set-theme"]{display:none}
</style>
<script is:inline>
  (function(){
    const ready = (fn)=> (document.readyState==='loading' ? document.addEventListener('DOMContentLoaded', fn, {once:true}) : fn());
    ready(()=>{
      const setAll = (val) => {
        document.querySelectorAll('.cs-root').forEach(root => {
          const btn = root.querySelector(`[data-action=\"set-theme\"][data-value=\"${val}\"]`);
          (btn)?.dispatchEvent(new MouseEvent('click', { bubbles:true, cancelable:true }));
        });
        document.querySelectorAll('[data-theme-all]').forEach(b => b.setAttribute('aria-pressed', b.getAttribute('data-theme-all')===val?'true':'false'));
      };
      document.querySelectorAll('[data-theme-all]').forEach(b => b.addEventListener('click', () => setAll(b.getAttribute('data-theme-all') || 'dark')));
      setAll('dark');
    });
  })();
</script>
