---
import DocsBase from '../../../layouts/DocsBase.astro';
import ToC from '../../../components/docs/ToC.astro';
import DocSection from '../../../components/docs/DocSection.astro';
import Tips from '../../../components/docs/Tips.astro';
import CodeBlock from '../../../components/docs/CodeBlock.astro';
import ComponentShowcase from '../../../components/ComponentShowcase.astro';
import PlaygroundLink from '../../../components/docs/PlaygroundLink.astro';
---

<DocsBase title="Guide – Orbs + Glass Hero">
  <h1>Guide: Orbs + Glass Hero</h1>
  <p class="lead">Combine <span class="code-inline">.bg-orbs-hero</span> with a <span class="code-inline">.glass-card</span> for a clear, performant hero section.</p>

  <div class="theme-controls" role="group" aria-label="Theme">
    <button type="button" class="tc-btn" data-theme-all="light">Light</button>
    <button type="button" class="tc-btn" data-theme-all="dark" aria-pressed="true">Dark</button>
  </div>

  <ToC items={[
    { id: 'layout', label: 'Layout' },
    { id: 'hero-markup', label: 'Hero Markup' },
    { id: 'cta-card', label: 'CTA Card' },
    { id: 'a11y-performance', label: 'A11y & Performance' },
  ]} />

  <DocSection id="layout" title="Layout">
    <Tips items={[
      'Set a minimum height (e.g. min-h-[40vh]) for visual presence.',
      'Center with Flex/Grid for simple, robust positioning.',
      'Docs layout stays neutral; only the hero uses effect styles.',
    ]} />
  </DocSection>

  <DocSection id="hero-markup" title="Hero Markup">
    <ComponentShowcase title="Hero" description="Orbs + zentrierter Inhalt" fullBleed={true} minHeight="40vh" showCodeInitially={true}>
      <div slot="light">
        <section class="bg-orbs-hero min-h-[40vh] grid place-items-center">
          <div class="glass-card p-8 rounded-2xl text-center">
            <h2 class="text-3xl font-bold mb-2">Your Product</h2>
            <p class="opacity-90 mb-4">A short value proposition in one sentence.</p>
            <button class="glass-button-primary">Get started</button>
          </div>
        </section>
      </div>
      <div slot="dark">
        <section class="bg-orbs-hero min-h-[40vh] grid place-items-center">
          <div class="glass-card p-8 rounded-2xl text-center">
            <h2 class="text-3xl font-bold mb-2">Your Product</h2>
            <p class="opacity-90 mb-4">A short value proposition in one sentence.</p>
            <button class="glass-button-primary">Get started</button>
          </div>
        </section>
      </div>
      <template slot="code">
{`<section class="bg-orbs-hero min-h-[40vh] grid place-items-center">
  <div class="glass-card p-8 rounded-2xl text-center">
    <h2 class="text-3xl font-bold mb-2">Your Product</h2>
    <p class="opacity-90 mb-4">A short value proposition in one sentence.</p>
    <button class="glass-button-primary">Get started</button>
  </div>
</section>`}
      </template>
    </ComponentShowcase>
    <div style="margin-top:.5rem"><PlaygroundLink preset="hero-cta" pane="dark" /></div>
  </DocSection>

  <DocSection id="cta-card" title="CTA Card">
    <Tips items={[ 'Use generous padding (e.g. p-8).', 'Align radii — tokens help you keep it consistent.' ]} />
    <CodeBlock lang="css" title="Optionale Token‑Anpassungen">
{`.hero {
  --glass-radius: 1.5rem;
}
.hero .glass-card { border-radius: var(--glass-radius); }`}
    </CodeBlock>
  </DocSection>

  <DocSection id="a11y-performance" title="Accessibility & Performance">
    <Tips items={[
      'Keep focus states visible (tab‑navigation).',
      'Ensure readability: check size/contrast.',
      'Respect prefers-reduced-motion.',
    ]} />
  </DocSection>

</DocsBase>
<style is:global>
  .theme-controls{display:flex;gap:.5rem;margin:1rem 0}
  .tc-btn{appearance:none;border:1px solid var(--docs-border);background:linear-gradient(180deg,var(--docs-panel),var(--docs-panel-2));
    color:var(--docs-text);border-radius:999px;padding:.45rem .75rem;cursor:pointer}
  .tc-btn[aria-pressed="true"]{background:rgba(255,255,255,.1)}
  .docs-showcase .cs-controls [data-action="set-theme"]{display:none}
</style>
<script is:inline>
  (function(){
    const ready = (fn)=> (document.readyState==='loading' ? document.addEventListener('DOMContentLoaded', fn, {once:true}) : fn());
    ready(()=>{
      const setAll = (val) => {
        document.querySelectorAll('.cs-root').forEach(root => {
          const btn = root.querySelector(`[data-action=\"set-theme\"][data-value=\"${val}\"]`);
          (btn)?.dispatchEvent(new MouseEvent('click', { bubbles:true, cancelable:true }));
        });
        document.querySelectorAll('[data-theme-all]').forEach(b => b.setAttribute('aria-pressed', b.getAttribute('data-theme-all')===val?'true':'false'));
      };
      document.querySelectorAll('[data-theme-all]').forEach(b => b.addEventListener('click', () => setAll(b.getAttribute('data-theme-all') || 'dark')));
      setAll('dark');
    });
  })();
</script>
