---
import DocsBase from '../../layouts/DocsBase.astro';
import ToC from '../../components/docs/ToC.astro';
import DocSection from '../../components/docs/DocSection.astro';
import Tips from '../../components/docs/Tips.astro';
import ComponentShowcase from '../../components/ComponentShowcase.astro';
import PlaygroundLink from '../../components/docs/PlaygroundLink.astro';
---

<DocsBase title="Docs – Templates">
  <h1>Templates</h1>
  <p class="lead">Kopierbare Vorlagen, die gängige Kombinationen der Effekte zeigen. Die Doku bleibt stilistisch unabhängig von den Effekt‑Stilen.</p>

  <div class="theme-controls" role="group" aria-label="Theme">
    <button type="button" class="tc-btn" data-theme-all="light">Hell</button>
    <button type="button" class="tc-btn" data-theme-all="dark" aria-pressed="true">Dunkel</button>
  </div>

  <ToC items={[
    { id: 'hero-cta', label: 'Hero + CTA' },
    { id: 'features', label: 'Feature Grid' },
    { id: 'login-card', label: 'Login Card' },
  ]} />

  <Tips items={[
    'Erst Layout & Semantik, dann Effekte ergänzen.',
    'Mobile zuerst denken: Abstände und Lesbarkeit testen.',
    'Nicht alle Effekte gleichzeitig verwenden – Akzente setzen.',
  ]} />

  <DocSection id="hero-cta" title="Hero + CTA" description="Orbs‑Hero mit Glass‑CTA">
    <ComponentShowcase title="Hero + CTA" description="bg-orbs-hero + glass-card" fullBleed={true} minHeight="40vh" showCodeInitially={true}>
      <div slot="light">
        <section class="bg-orbs-hero flex items-center justify-center min-h-[40vh]">
          <div class="glass-card p-8 rounded-2xl text-center">
            <h2 class="text-3xl font-bold mb-2">Dein Produkt</h2>
            <p class="opacity-90 mb-4">Kurzer Nutzen‑Pitch in einem Satz.</p>
            <button class="glass-button-primary">Jetzt starten</button>
          </div>
        </section>
      </div>
      <div slot="dark">
        <section class="bg-orbs-hero flex items-center justify-center min-h-[40vh]">
          <div class="glass-card p-8 rounded-2xl text-center">
            <h2 class="text-3xl font-bold mb-2">Dein Produkt</h2>
            <p class="opacity-90 mb-4">Kurzer Nutzen‑Pitch in einem Satz.</p>
            <button class="glass-button-primary">Jetzt starten</button>
          </div>
        </section>
      </div>
      <template slot="code">
{`<section class="bg-orbs-hero min-h-[40vh] flex items-center justify-center">
  <div class="glass-card p-8 rounded-2xl text-center">
    <h2>Dein Produkt</h2>
    <p>Kurzer Nutzen‑Pitch …</p>
    <button class="glass-button-primary">Jetzt starten</button>
  </div>
</section>`}
      </template>
    </ComponentShowcase>
    <div style="margin-top:.5rem"><PlaygroundLink preset="hero-cta" pane="dark" /></div>
  </DocSection>

  <DocSection id="features" title="Feature Grid" description="Glas‑Karten in einem Grid">
    <ComponentShowcase title="Feature Grid" description="3 Karten im Grid" minHeight="18rem" showCodeInitially={true}>
      <div slot="light">
        <div class="grid md:grid-cols-3 gap-4">
          <article class="glass-card-light p-6 rounded-xl"><h3>Feature A</h3><p>Beschreibung</p></article>
          <article class="glass-card p-6 rounded-xl"><h3>Feature B</h3><p>Beschreibung</p></article>
          <article class="glass-card-light p-6 rounded-xl"><h3>Feature C</h3><p>Beschreibung</p></article>
        </div>
      </div>
      <div slot="dark">
        <div class="grid md:grid-cols-3 gap-4">
          <article class="glass-card p-6 rounded-xl"><h3>Feature A</h3><p>Beschreibung</p></article>
          <article class="glass-card p-6 rounded-xl"><h3>Feature B</h3><p>Beschreibung</p></article>
          <article class="glass-card p-6 rounded-xl"><h3>Feature C</h3><p>Beschreibung</p></article>
        </div>
      </div>
      <template slot="code">
{`<div class="grid md:grid-cols-3 gap-4">
  <article class="glass-card p-6 rounded-xl">…</article>
  <article class="glass-card-light p-6 rounded-xl">…</article>
  <article class="glass-card-light p-6 rounded-xl">…</article>
</div>`}
      </template>
    </ComponentShowcase>
    <div style="margin-top:.5rem"><PlaygroundLink preset="feature-grid" /></div>
  </DocSection>

  <DocSection id="login-card" title="Login Card" description="Formulare mit Inputs & Buttons">
    <ComponentShowcase title="Login Card" description="glass-card + inputs" minHeight="18rem" showCodeInitially={true}>
      <div slot="light">
        <form class="glass-card-light p-6 rounded-xl grid gap-3 w-[22rem] max-w-full">
          <input class="glass-input-light" placeholder="E‑Mail" />
          <input class="glass-input-light" type="password" placeholder="Passwort" />
          <button class="glass-button-primary">Login</button>
        </form>
      </div>
      <div slot="dark">
        <form class="glass-card p-6 rounded-xl grid gap-3 w-[22rem] max-w-full">
          <input class="glass-input" placeholder="E‑Mail" />
          <input class="glass-input" type="password" placeholder="Passwort" />
          <button class="glass-button-primary">Login</button>
        </form>
      </div>
      <template slot="code">
{`<form class="glass-card p-6 rounded-xl grid gap-3 w-[22rem]">
  <input class="glass-input" placeholder="E‑Mail" />
  <input class="glass-input" type="password" placeholder="Passwort" />
  <button class="glass-button-primary">Login</button>
</form>`}
      </template>
    </ComponentShowcase>
    <div style="margin-top:.5rem"><PlaygroundLink preset="login-card" /></div>
  </DocSection>

</DocsBase>
<style is:global>
  .theme-controls{display:flex;gap:.5rem;margin:1rem 0}
  .tc-btn{appearance:none;border:1px solid var(--docs-border);background:linear-gradient(180deg,var(--docs-panel),var(--docs-panel-2));
    color:var(--docs-text);border-radius:999px;padding:.45rem .75rem;cursor:pointer}
  .tc-btn[aria-pressed="true"]{background:rgba(255,255,255,.1)}
  .docs-showcase .cs-controls [data-action="set-theme"]{display:none}
</style>
<script is:inline>
  (function(){
    const ready = (fn)=> (document.readyState==='loading' ? document.addEventListener('DOMContentLoaded', fn, {once:true}) : fn());
    ready(()=>{
      const setAll = (val) => {
        document.querySelectorAll('.cs-root').forEach(root => {
          const btn = root.querySelector(`[data-action=\"set-theme\"][data-value=\"${val}\"]`);
          (btn)?.dispatchEvent(new MouseEvent('click', { bubbles:true, cancelable:true }));
        });
        document.querySelectorAll('[data-theme-all]').forEach(b => b.setAttribute('aria-pressed', b.getAttribute('data-theme-all')===val?'true':'false'));
      };
      document.querySelectorAll('[data-theme-all]').forEach(b => b.addEventListener('click', () => setAll(b.getAttribute('data-theme-all') || 'dark')));
      setAll('dark');
    });
  })();
</script>
